@model POS_Demo.DataModels.Units_Details

@{
    ViewBag.Title = "Create";
}


@section styles{}
@section ActionLink{}
@section Toolbar {}

<!--begin::Portlet-->
<div class="kt-portlet kt-portlet--mobile">
    <div class="kt-portlet__head kt-portlet__head--lg">
        <div class="kt-portlet__head-label">
            <span class="kt-portlet__head-icon">
                <i class="flaticon2-soft-icons"></i>
            </span>
            <h3 class="kt-portlet__head-title">@ViewBag.Title</h3>
        </div>
    </div>
    <div class="kt-portlet__body">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__body container">
                <!--begin::body-->
                <!-------------------------------------------------------->
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary("", new { @class = "text-danger" })

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.SaleDate)
                                <span class="kt-font-danger">*</span>
                                <div class="input-group date">
                                    @Html.EditorFor(model => model.SaleDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                                    <div class="input-group-append"><span class="input-group-text"><i class="fa fa-calendar-alt"></i></span></div>
                                </div>
                                @Html.ValidationMessageFor(model => model.SaleDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.FK_DeveloperId)
                                <span class="kt-font-danger">*</span>
                                @Html.DropDownList("FK_DeveloperId", null, "Select Developer", htmlAttributes: new { @class = "form-control select2" })
                                @Html.ValidationMessageFor(model => model.FK_DeveloperId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Unit_NO)
                                <span class="kt-font-danger">*</span>
                                @Html.EditorFor(model => model.Unit_NO, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Unit_NO, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.FK_Sales_PersonId)
                                <span class="kt-font-danger">*</span>
                                @Html.DropDownList("FK_Sales_PersonId", null, "Select Salesperson", htmlAttributes: new { @class = "form-control select2" })
                                @Html.ValidationMessageFor(model => model.FK_Sales_PersonId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Unit_Volume)
                                @Html.EditorFor(model => model.Unit_Volume, new { htmlAttributes = new { @class = "form-control inputmask" } })
                                @Html.ValidationMessageFor(model => model.Unit_Volume, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Deal_Slab)
                                <span class="kt-font-danger">*</span>
                                <div class="input-group">
                                    @Html.EditorFor(model => model.Deal_Slab, new { htmlAttributes = new { @class = "form-control inputmask" } })
                                    <div class="input-group-append"><span class="input-group-text"><i class="fa fa-percent"></i></span></div>
                                </div>
                                @Html.ValidationMessageFor(model => model.Deal_Slab, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Commission_Amount)
                                @Html.EditorFor(model => model.Commission_Amount, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.Commission_Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Commission_Deduction)
                                @Html.EditorFor(model => model.Commission_Deduction, new { htmlAttributes = new { @class = "form-control inputmask" } })
                                @Html.ValidationMessageFor(model => model.Commission_Deduction, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Total_Commission)
                                @Html.EditorFor(model => model.Total_Commission, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.Total_Commission, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @Html.Partial("_Form_Actions")
                }
                <!-------------------------------------------------------->
                <!--end::body-->
            </div>
        </div>
    </div>
</div>
<!--end::Portlet-->

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var Unit_Volume = $('#Unit_Volume'),
                Deal_Slab = $('#Deal_Slab'),
                Commission_Amount = $('#Commission_Amount'),
                Commission_Deduction = $('#Commission_Deduction'),
                Total_Commission = $('#Total_Commission');

            Unit_Volume.on('change', function () {
                if (Unit_Volume.val() == '') {
                    Deal_Slab.val('').trigger('change');
                    Commission_Amount.val('').trigger('change');
                    Commission_Deduction.val('').trigger('change');
                    Total_Commission.val('').trigger('change');
                    return false;
                }

                Commission_Amount.val(((Unit_Volume.val() * Deal_Slab.val()) / 100));
                Total_Commission.val(Commission_Amount.val() - Commission_Deduction.val());
            });

            Deal_Slab.on('change', function () {
                Commission_Amount.val(((Unit_Volume.val() * Deal_Slab.val()) / 100));
                Total_Commission.val(Commission_Amount.val() - Commission_Deduction.val());
            });

            Commission_Deduction.on('change', function () {
                Commission_Amount.val(((Unit_Volume.val() * Deal_Slab.val()) / 100));
                Total_Commission.val(Commission_Amount.val() - Commission_Deduction.val());
            });

        });
    </script>
}
